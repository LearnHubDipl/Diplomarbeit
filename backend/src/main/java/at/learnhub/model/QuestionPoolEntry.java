package at.learnhub.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import org.eclipse.microprofile.openapi.annotations.media.Schema;

import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "question_pool_entry")
@Schema(description = "Represents an individual question entry within a user's personal question pool.")
public class QuestionPoolEntry {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(
            description = "Unique identifier of the question pool entry. Generated by the system.",
            example = "123",
            readOnly = true
    )
    private Long id;

    @Column(name = "answered_at")
    @Schema(
            description = "Timestamp of the last time the question was answered by the user.",
            example = "2025-07-10T15:30:00"
    )
    private LocalDateTime answeredAt;

    @Column(name = "last_answered_correctly")
    @Schema(
            description = "Indicates if the question was last answered correctly.",
            example = "true"
    )
    private Boolean lastAnsweredCorrectly;

    @Column(name = "correct_count")
    @Schema(
            description = "Number of consecutive times the question has been answered correctly by the user.",
            example = "2"
    )
    private Integer correctCount;

    @ManyToOne
    @JoinColumn(name = "question_id")
    @JsonIgnoreProperties({"entries", "user"})
    private Question question;

    @ManyToOne
    @JoinColumn(name = "pool_id")
    @JsonIgnoreProperties({"entries", "user"})
    private QuestionPool questionPool;

    @OneToMany(mappedBy = "entry")
    @JsonIgnoreProperties({"entry"})
    private List<ExamQuestion> examQuestions;

    // Getters and setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public LocalDateTime getAnsweredAt() {
        return answeredAt;
    }

    public void setAnsweredAt(LocalDateTime answeredAt) {
        this.answeredAt = answeredAt;
    }

    public Boolean getLastAnsweredCorrectly() {
        return lastAnsweredCorrectly;
    }

    public void setLastAnsweredCorrectly(Boolean lastAnsweredCorrectly) {
        this.lastAnsweredCorrectly = lastAnsweredCorrectly;
    }

    public Integer getCorrectCount() {
        return correctCount;
    }

    public void setCorrectCount(Integer correctCount) {
        this.correctCount = correctCount;
    }

    public Question getQuestion() {
        return question;
    }

    public void setQuestion(Question question) {
        this.question = question;
    }

    public QuestionPool getQuestionPool() {
        return questionPool;
    }

    public void setQuestionPool(QuestionPool questionPool) {
        this.questionPool = questionPool;
    }

    public List<ExamQuestion> getExamQuestions() {
        return examQuestions;
    }

    public void setExamQuestions(List<ExamQuestion> examQuestions) {
        this.examQuestions = examQuestions;
    }
}
