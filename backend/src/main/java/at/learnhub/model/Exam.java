package at.learnhub.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import org.eclipse.microprofile.openapi.annotations.media.Schema;

import java.time.LocalDateTime;
import java.util.List;

@Entity
@Schema(description = "Represents a completed or in-progress exam instance for a user.")
public class Exam {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(
            description = "Unique identifier of the exam. Generated by the system.",
            example = "101",
            readOnly = true
    )
    private Long id;

    @Column(name = "time_limit")
    @Schema(
            description = "Time limit for the exam in minutes.",
            example = "60"
    )
    private Integer timeLimit;

    @Column(name = "started_at")
    @Schema(
            description = "Timestamp when the exam was started. Set automatically when the exam begins.",
            example = "2025-07-10T14:30:00",
            readOnly = true
    )
    private LocalDateTime startedAt;

    @Column(name = "finished_at")
    @Schema(
            description = "Timestamp when the exam was finished. Set automatically when the exam ends.",
            example = "2025-07-10T15:15:00",
            readOnly = true
    )
    private LocalDateTime finishedAt;

    @Schema(
            description = "Total number of questions included in this exam.",
            example = "20",
            readOnly = true
    )
    private Integer questionCount;

    @Schema(
            description = "Final score achieved in this exam, typically between 0.0 and 100.0.",
            example = "87.5",
            readOnly = true
    )
    private Double score;

    @ManyToOne
    @JoinColumn(name = "user_id")
    @JsonIgnoreProperties({"exams", "ownedTopicContents", "approvedTopicContents", "teacherOfTopicContents"})
    private User user;

    @ManyToMany
    @JoinTable(
            name = "exam_topic_pool",
            joinColumns = @JoinColumn(name = "exam_id"),
            inverseJoinColumns = @JoinColumn(name = "topic_pool_id")
    )
    @JsonIgnoreProperties({"exams", "topicContents", "questions"})
    private List<TopicPool> topicPools;

    @OneToMany(mappedBy = "exam")
    @JsonIgnoreProperties({"exam"})
    private List<ExamQuestion> questions;

    // Getters and setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getTimeLimit() {
        return timeLimit;
    }

    public void setTimeLimit(Integer timeLimit) {
        this.timeLimit = timeLimit;
    }

    public LocalDateTime getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(LocalDateTime startedAt) {
        this.startedAt = startedAt;
    }

    public LocalDateTime getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(LocalDateTime finishedAt) {
        this.finishedAt = finishedAt;
    }

    public Integer getQuestionCount() {
        return questionCount;
    }

    public void setQuestionCount(Integer questionCount) {
        this.questionCount = questionCount;
    }

    public Double getScore() {
        return score;
    }

    public void setScore(Double score) {
        this.score = score;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public List<TopicPool> getTopicPools() {
        return topicPools;
    }

    public void setTopicPools(List<TopicPool> topicPools) {
        this.topicPools = topicPools;
    }

    public List<ExamQuestion> getQuestions() {
        return questions;
    }

    public void setQuestions(List<ExamQuestion> questions) {
        this.questions = questions;
    }
}
