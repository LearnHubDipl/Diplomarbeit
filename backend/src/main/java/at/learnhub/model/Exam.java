package at.learnhub.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;

import java.time.LocalDateTime;
import java.util.List;


/**
 * Represents a completed or in-progress exam instance for a user.
 */
@Entity
public class Exam {

    /**
     * Unique identifier of the exam. Generated by the system.
     * Example: 101
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Time limit for the exam in minutes.
     * Example: 60
     */
    @Column(name = "time_limit")
    private Integer timeLimit;

    /**
     * Timestamp when the exam was started. Set automatically when the exam begins.
     * Example: 2025-07-10T14:30:00
     */
    @Column(name = "started_at")
    private LocalDateTime startedAt;

    /**
     * Timestamp when the exam was finished. Set automatically when the exam ends.
     * Example: 2025-07-10T15:15:00
     */
    @Column(name = "finished_at")
    private LocalDateTime finishedAt;

    /**
     * Total number of questions included in this exam.
     * Example: 20
     */
    private Integer questionCount;

    /**
     * Final score achieved in this exam, typically between 0.0 and 100.0.
     * Example: 87.5
     */
    private Double score;

    /**
     * The user who took this exam.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    @JsonIgnoreProperties({"exams", "ownedTopicContents", "approvedTopicContents", "teacherOfTopicContents"})
    private User user;

    /**
     * The topic pools selected for this exam.
     */
    @ManyToMany
    @JoinTable(
            name = "exam_topic_pool",
            joinColumns = @JoinColumn(name = "exam_id"),
            inverseJoinColumns = @JoinColumn(name = "topic_pool_id")
    )
    @JsonIgnoreProperties({"exams", "topicContents", "questions"})
    private List<TopicPool> topicPools;

    /**
     * The list of exam-specific questions that were presented to the user.
     */
    @OneToMany(mappedBy = "exam")
    @JsonIgnoreProperties({"exam"})
    private List<ExamQuestion> questions;


    // Getters and setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getTimeLimit() {
        return timeLimit;
    }

    public void setTimeLimit(Integer timeLimit) {
        this.timeLimit = timeLimit;
    }

    public LocalDateTime getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(LocalDateTime startedAt) {
        this.startedAt = startedAt;
    }

    public LocalDateTime getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(LocalDateTime finishedAt) {
        this.finishedAt = finishedAt;
    }

    public Integer getQuestionCount() {
        return questionCount;
    }

    public void setQuestionCount(Integer questionCount) {
        this.questionCount = questionCount;
    }

    public Double getScore() {
        return score;
    }

    public void setScore(Double score) {
        this.score = score;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public List<TopicPool> getTopicPools() {
        return topicPools;
    }

    public void setTopicPools(List<TopicPool> topicPools) {
        this.topicPools = topicPools;
    }

    public List<ExamQuestion> getQuestions() {
        return questions;
    }

    public void setQuestions(List<ExamQuestion> questions) {
        this.questions = questions;
    }
}
